{"version":3,"sources":["components/Header/Header.js","components/ProjectDetails/ProjectDetails.js","components/ProjectList/ProjectList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","axios","require","ProjectDetails","state","commitDetails","componentDidMount","params","process","REACT_APP_GITHUB_TOKEN","headers","Authorization","get","concat","_this","props","name","then","data","setState","this","map","details","index","key","commit","committer","message","date","href","html_url","rel","target","ProjectList","projects","th","processedProjects","serverRequest","source","result","status","defaultStatus","project","push","sort","b","promiseArray","Promise","all","results","console","log","repository","full_name","reason","catch","pIndex","isOpen","_this2","projectStatus","onClick","handleProjectClick","ProjectDetails_ProjectDetails_ProjectDetails","App","Helmet_default","htmlAttributes","lang","amp","undefined","meta","content","title","Header_Header_Header","ProjectList_ProjectList_ProjectList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af472fde.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h1>CommitStatus</h1>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport \"./ProjectDetails.css\";\nvar axios = require('axios');\nexport default class ProjectDetails extends Component {\n    state={\n        commitDetails:null\n    }\n    componentDidMount=()=>{\n        const params = {};\n      if (process.env.REACT_APP_GITHUB_TOKEN) {\n        params.headers = {\n          Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n        };\n      }\n  \n      axios.get(\n        `https://api.github.com/repos/${this.props.name}/commits`,\n        params\n      ).then(data=>this.setState({commitDetails:data.data}))\n    }\n    render() {\n       if(!this.state.commitDetails){\n           return(\n               <div><h5>Loading details ...</h5></div>\n           )\n       }\n        return (\n            <div>\n             Commit Details\n             <table>\n                 <thead>\n                            <tr>\n                               <th>Committer</th> \n                               <th>Message</th>\n                               <th>Date</th> \n                                <th>Changes</th> \n                            </tr>\n                            </thead>\n                            <tbody>\n                {this.state.commitDetails.map((details,index)=>(\n                    <tr key={index}>\n                        \n                        <td>{details.commit.committer.name}</td>\n                        <td>{details.commit.message}</td>\n                        <td>{details.commit.committer.date}</td>\n                      <td><a href={details.html_url} rel=\"noopener noreferrer\"  target=\"_blank\">See changes here</a></td> \n                      \n                    </tr>\n                ))}\n                </tbody> \n                  </table>\n            </div>\n            \n        )\n    }\n}\n","import React from 'react';\nimport './ProjectList.css';\n\nimport ProjectDetails from '../ProjectDetails/ProjectDetails';\n\nvar axios = require('axios');\n\nexport default class ProjectList extends React.Component {\n  state = {\n    projects: [],\n  };\n\n  componentDidMount() {\n    var th = this;\n    var processedProjects = [];\n    this.serverRequest = axios.get(this.props.source).then(function(result) {\n      var status = result.data.defaultStatus;\n      result.data.projects.map(function(project) {\n        return processedProjects.push({ name: project, status: status });\n      });\n      th.setState({\n        projects: processedProjects.sort((a, b) => {\n          if (a.name < b.name) \n            return -1\n          else if (a.name > b.name)\n            return 1\n          return a.status > b.status ? -1 : 1\n        }),\n      });\n      const params = {};\n      if (process.env.REACT_APP_GITHUB_TOKEN) {\n        params.headers = {\n          Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n        };\n      }\n      let promiseArray = processedProjects.map(project =>\n        axios.get(\n          `https://api.github.com/repos/${project.name}/commits/master/status`,\n          params\n        )\n      );\n      Promise.all(promiseArray)\n        .then(\n          results => {\n            console.log('values', results);\n            processedProjects = [];\n            results.map(function(project) {\n              return processedProjects.push({\n                name: project.data.repository.full_name,\n                status: project.data.state,\n              });\n            });\n            th.setState({\n              projects: processedProjects,\n            });\n          },\n          reason => {\n            console.log('error', reason);\n          }\n        )\n        .catch(console.log());\n    });\n  }\n\n  handleProjectClick(index){\n    this.setState({\n      projects: this.state.projects.map((project, pIndex) => {\n        if (pIndex !== index || (pIndex === index && project.isOpen)){\n          project.isOpen = false\n          return project\n        }\n        project.isOpen = true\n        return project\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.projectStatus}\n        {this.state.projects.map((project, index) => {\n          return (\n            <div key={index} className={`project ${project.status}`} \n              onClick={() => this.handleProjectClick(index)}\n              >\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={`https://github.com/${project.name}`}\n              >\n                {project.name}\n              </a>{' '}\n              - <span className={project.status}>{project.status}</span>\n              {\n                project.isOpen && <ProjectDetails name={project.name}/>\n              }\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport ProjectList from './components/ProjectList/ProjectList';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Helmet\n          htmlAttributes={{ lang: 'en', amp: undefined }}\n          meta={[\n            {\n              name: 'description',\n              content:\n                'A simple React app that shows a list of projects with their Github commit status and use it as a dashboard to view status of your CI pipelines.',\n            },\n          ]}\n          title=\"CommitStatus\"\n        />\n        <Header />\n        <ProjectList source=\"./data/repositories.json\" />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}