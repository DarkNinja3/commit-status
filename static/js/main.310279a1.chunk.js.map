{"version":3,"sources":["components/Header/Header.js","components/ProjectList/ProjectList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","axios","require","ProjectList","state","projects","th","this","processedProjects","serverRequest","get","props","source","then","result","status","data","defaultStatus","map","project","push","name","setState","params","process","REACT_APP_GITHUB_TOKEN","headers","Authorization","promiseArray","concat","Promise","all","results","console","log","repository","full_name","reason","catch","projectStatus","index","key","target","rel","href","App","Helmet_default","htmlAttributes","lang","amp","undefined","meta","content","title","Header_Header_Header","ProjectList_ProjectList_ProjectList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAGqBA,gMAEjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,kCAJ4BE,IAAMC,YCAtCC,SAAQC,EAAQ,KAECC,6MACnBC,MAAQ,CACNC,SAAU,uFAIV,IAAIC,EAAKC,KACLC,EAAoB,GACxBD,KAAKE,cAAgBR,EAAMS,IAAIH,KAAKI,MAAMC,QAAQC,KAAK,SAASC,GAC9D,IAAIC,EAASD,EAAOE,KAAKC,cACzBH,EAAOE,KAAKX,SAASa,IAAI,SAASC,GAChC,OAAOX,EAAkBY,KAAK,CAAEC,KAAMF,EAASJ,OAAQA,MAEzDT,EAAGgB,SAAS,CACVjB,SAAUG,IAEZ,IAAMe,EAAS,GACXC,4DAAYC,yBACdF,EAAOG,QAAU,CACfC,cAAeH,4DAAYC,yBAG/B,IAAIG,EAAepB,EAAkBU,IAAI,SAAAC,GAAO,OAC9ClB,EAAMS,IAAN,gCAAAmB,OACkCV,EAAQE,KAD1C,0BAEEE,KAGJO,QAAQC,IAAIH,GACTf,KACC,SAAAmB,GACEC,QAAQC,IAAI,SAAUF,GACtBxB,EAAoB,GACpBwB,EAAQd,IAAI,SAASC,GACnB,OAAOX,EAAkBY,KAAK,CAC5BC,KAAMF,EAAQH,KAAKmB,WAAWC,UAC9BrB,OAAQI,EAAQH,KAAKZ,UAGzBE,EAAGgB,SAAS,CACVjB,SAAUG,KAGd,SAAA6B,GACEJ,QAAQC,IAAI,QAASG,KAGxBC,MAAML,QAAQC,0CAKnB,OACEvC,EAAAC,EAAAC,cAAA,WACGU,KAAKH,MAAMmC,cACXhC,KAAKH,MAAMC,SAASa,IAAI,SAASC,EAASqB,GACzC,OACE7C,EAAAC,EAAAC,cAAA,OAAK4C,IAAKD,EAAO1C,UAAS,WAAA+B,OAAaV,EAAQJ,SAC7CpB,EAAAC,EAAAC,cAAA,KACE6C,OAAO,SACPC,IAAI,sBACJC,KAAI,sBAAAf,OAAwBV,EAAQE,OAEnCF,EAAQE,MACN,IAPP,KAQI1B,EAAAC,EAAAC,cAAA,QAAMC,UAAWqB,EAAQJ,QAASI,EAAQJ,mBAjEjBhB,IAAMC,WCC1B6C,mLAEjB,OACElD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiD,EAAAlD,EAAD,CACEmD,eAAgB,CAAEC,KAAM,KAAMC,SAAKC,GACnCC,KAAM,CACJ,CACE9B,KAAM,cACN+B,QACE,oJAGNC,MAAM,iBAER1D,EAAAC,EAAAC,cAACyD,EAAD,MACA3D,EAAAC,EAAAC,cAAC0D,EAAD,CAAa3C,OAAO,qCAhBKZ,aCMbwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.310279a1.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h1>CommitStatus</h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './ProjectList.css';\n\nvar axios = require('axios');\n\nexport default class ProjectList extends React.Component {\n  state = {\n    projects: [],\n  };\n\n  componentDidMount() {\n    var th = this;\n    var processedProjects = [];\n    this.serverRequest = axios.get(this.props.source).then(function(result) {\n      var status = result.data.defaultStatus;\n      result.data.projects.map(function(project) {\n        return processedProjects.push({ name: project, status: status });\n      });\n      th.setState({\n        projects: processedProjects,\n      });\n      const params = {};\n      if (process.env.REACT_APP_GITHUB_TOKEN) {\n        params.headers = {\n          Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n        };\n      }\n      let promiseArray = processedProjects.map(project =>\n        axios.get(\n          `https://api.github.com/repos/${project.name}/commits/master/status`,\n          params\n        )\n      );\n      Promise.all(promiseArray)\n        .then(\n          results => {\n            console.log('values', results);\n            processedProjects = [];\n            results.map(function(project) {\n              return processedProjects.push({\n                name: project.data.repository.full_name,\n                status: project.data.state,\n              });\n            });\n            th.setState({\n              projects: processedProjects,\n            });\n          },\n          reason => {\n            console.log('error', reason);\n          }\n        )\n        .catch(console.log());\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.projectStatus}\n        {this.state.projects.map(function(project, index) {\n          return (\n            <div key={index} className={`project ${project.status}`}>\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={`https://github.com/${project.name}`}\n              >\n                {project.name}\n              </a>{' '}\n              - <span className={project.status}>{project.status}</span>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport ProjectList from './components/ProjectList/ProjectList';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Helmet\n          htmlAttributes={{ lang: 'en', amp: undefined }}\n          meta={[\n            {\n              name: 'description',\n              content:\n                'A simple React app that shows a list of projects with their Github commit status and use it as a dashboard to view status of your CI pipelines.',\n            },\n          ]}\n          title=\"CommitStatus\"\n        />\n        <Header />\n        <ProjectList source=\"./data/repositories.json\" />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}