{"version":3,"sources":["components/Header/Header.js","components/Search Component/Search.js","components/ProjectDetails/ProjectDetails.js","components/ProjectList/ProjectList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","axios","require","Search","state","input","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","params","process","REACT_APP_GITHUB_TOKEN","headers","Authorization","console","log","concat","get","then","data","obj","name","repository","full_name","status","props","addProject","catch","handlePress","render","onSubmit","type","onChange","placeholder","onClick","ProjectDetails","commitDetails","componentDidMount","this","map","details","index","key","commit","committer","message","date","href","html_url","rel","ProjectList","projects","th","Object","assertThisInitialized","processedProjects","serverRequest","source","result","defaultStatus","project","push","sort","b","promiseArray","Promise","all","results","reason","filteredArray","filter","flag","forEach","proj","newArray","toConsumableArray","Search_Search","projectStatus","handleProjectClick","isOpen","ProjectDetails_ProjectDetails_ProjectDetails","pIndex","App","Helmet_default","htmlAttributes","lang","amp","undefined","meta","content","title","Header_Header_Header","ProjectList_ProjectList_ProjectList","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d5b2a91.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h1>CommitStatus</h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport '../ProjectList/ProjectList.css';\nimport './Search.css';\n\nvar axios = require('axios');\n\nexport default class Search extends React.Component {\n  state = {\n    input:\"\"\n  };\n\n  handleChange = (e) => {\n    this.setState({input:e.target.value})\n  }\n  \n  handleSubmit = (e) => {\n    e.preventDefault();\n    const params = {};\n    if (process.env.REACT_APP_GITHUB_TOKEN) {\n      params.headers = {\n        Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n      };\n    }\nconsole.log(`https://api.github.com/repos/${this.state.input}/commits/master/status`)\n    axios.get(\n      `https://api.github.com/repos/${this.state.input}/commits/master/status`,\n\n      params\n    ).then(data=>{\n      let obj = {\n        name : data.data.repository.full_name,\n        status : data.data.state\n      }\n      this.props.addProject(obj)\n     \n    }).catch(console.log())\n  this.setState({\n    input:\"\"\n  })\n\n  }\nhandlePress=(e)=>{\n  e.preventDefault();\n  this.setState({input:\"\"})\n}\n\n  render = () => {\n  \n    return (\n      <div className=\"search project\">\n         <form onSubmit={this.handleSubmit}>\n        <input\n          className=\"input\"\n          type=\"text\"\n          onChange={this.handleChange}\n          value={this.state.input}\n          placeholder=\"Add a repo...\"\n        />\n        <button className=\"button\" type=\"submit\">\n          Add\n        </button>\n        {\n          this.state.input?<button onClick={this.handlePress}  className=\"button\">\n          X\n        </button>:null\n        }\n      </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport \"./ProjectDetails.css\";\nvar axios = require('axios');\nexport default class ProjectDetails extends Component {\n    state={\n        commitDetails:null\n    }\n    componentDidMount=()=>{\n        const params = {};\n      if (process.env.REACT_APP_GITHUB_TOKEN) {\n        params.headers = {\n          Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n        };\n      }\n  \n      axios.get(\n        `https://api.github.com/repos/${this.props.name}/commits`,\n        params\n      ).then(data=>this.setState({commitDetails:data.data}))\n    }\n    render() {\n       if(!this.state.commitDetails){\n           return(\n               <div><h5>Loading details ...</h5></div>\n           )\n       }\n        return (\n            <div>\n             Commit Details\n             <table>\n                 <thead>\n                            <tr>\n                               <th>Committer</th> \n                               <th>Message</th>\n                               <th>Date</th> \n                                <th>Changes</th> \n                            </tr>\n                            </thead>\n                            <tbody>\n                {this.state.commitDetails.map((details,index)=>(\n                    <tr key={index}>\n                        \n                        <td>{details.commit.committer.name}</td>\n                        <td>{details.commit.message}</td>\n                        <td>{details.commit.committer.date}</td>\n                      <td><a href={details.html_url} rel=\"noopener noreferrer\"  target=\"_blank\">See changes here</a></td> \n                      \n                    </tr>\n                ))}\n                </tbody> \n                  </table>\n            </div>\n            \n        )\n    }\n}\n","import React from 'react';\nimport './ProjectList.css';\nimport Search from '../Search Component/Search';\n\nimport ProjectDetails from '../ProjectDetails/ProjectDetails';\n\nvar axios = require('axios');\n\nexport default class ProjectList extends React.Component {\n  state = {\n    projects: [],\n  };\n\n  componentDidMount =() => {\n    let th = this;\n    let processedProjects = [];\n    this.serverRequest = axios.get(this.props.source).then(function(result) {\n      var status = result.data.defaultStatus;\n      result.data.projects.map(function(project) {\n        return processedProjects.push({ name: project, status: status });\n      });\n      th.setState({\n        projects: processedProjects.sort((a, b) => {\n          if (a.name < b.name) \n            return -1\n          else if (a.name > b.name)\n            return 1\n          return a.status > b.status ? -1 : 1\n        }),\n      });\n      const params = {};\n      if (process.env.REACT_APP_GITHUB_TOKEN) {\n        params.headers = {\n          Authorization: process.env.REACT_APP_GITHUB_TOKEN,\n        };\n      }\n    \n      let promiseArray = processedProjects.map(project =>{\n        return(\n        axios.get(\n          `https://api.github.com/repos/${project.name}/commits/master/status`,\n          params\n        )\n        )\n      }\n      );\n      Promise.all(promiseArray)\n        .then(\n          results => {\n            console.log('values', results);\n            processedProjects = [];\n            results.map(function(project) {\n              return processedProjects.push({\n                name: project.data.repository.full_name,\n                status: project.data.state,\n              });\n            });\n            th.setState({\n              projects: processedProjects,\n            });\n          },\n          reason => {\n            console.log('error', reason);\n          }\n        )\n        .catch(console.log());\n    });\n  }\n\n\n  handlePress = (name) => {\n    \n    let filteredArray = this.state.projects.filter((project)=>project.name!==name)\n    \n    this.setState({\n      projects : filteredArray\n    })\n  }\n\n  addProject = (project) => {\n    let flag = 0;\n    this.state.projects.forEach(proj=>{\n      if(proj.name===project.name&&proj.status===project.status){\n        flag =1;\n    \n      }\n    })\n\n    if(!(flag===1)){\n    let newArray = [ ...this.state.projects, project ];\n   \n    this.setState({ projects : newArray })\n    }\n  }\n\n  handleProjectClick(index){\n    this.setState({\n      projects: this.state.projects.map((project, pIndex) => {\n        if (pIndex !== index || (pIndex === index && project.isOpen)){\n          project.isOpen = false\n          return project\n        }\n        project.isOpen = true\n        return project\n      })\n    })\n  }\n\n  render = () => {\n   let handlePress = this.handlePress;\n   let addProject = this.addProject;\n\n    return (\n      <div>\n        <Search addProject = {(project)=>addProject(project)}/>\n        {this.state.projectStatus}\n        {this.state.projects.map((project, index) => {\n          return (\n            <div key={index} className={`project ${project.status}`} \n              onClick={() => this.handleProjectClick(index)}\n              >\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={`https://github.com/${project.name}`}\n              >\n                {project.name}\n              </a>{' '}\n              - <span className={project.status}>{project.status}</span>\n\n              <button className=\"remove\"  onClick={(index)=>handlePress(project.name)}>\n                Remove\n              </button>  \n\n              {\n                project.isOpen && <ProjectDetails name={project.name}/>\n              }\n\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport ProjectList from './components/ProjectList/ProjectList';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Helmet\n          htmlAttributes={{ lang: 'en', amp: undefined }}\n          meta={[\n            {\n              name: 'description',\n              content:\n                'A simple React app that shows a list of projects with their Github commit status and use it as a dashboard to view status of your CI pipelines.',\n            },\n          ]}\n          title=\"CommitStatus\"\n        />\n        <Header />\n        <ProjectList source=\"./data/repositories.json\" />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}